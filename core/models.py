import qrcode
from io import BytesIO
from django.core.files.base import ContentFile
from django.db import models
from django.contrib.auth.models import User
from django.utils.text import slugify
from .middleware import get_current_user  # Import the helper function

class TimestampModel(models.Model):
    """
    A base abstract model that provides timestamps.
    """
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        abstract = True

class qr_generator(TimestampModel):
    """
    A model to store and generate QR codes.
    """
    name = models.CharField(max_length=150)
    url = models.URLField(max_length=2000)
    qr_image = models.ImageField(upload_to='qr_codes/', blank=True, null=True)
    generated_by = models.ForeignKey(User, blank=True, null=True, on_delete=models.SET_NULL, related_name="generated_by")

    class Meta:
        verbose_name = "QR CODE"
        verbose_name_plural = "QR CODES"

    def __str__(self):
        return f"QR code {self.name} generated by {self.generated_by}" if self.generated_by else ""

    def save(self, *args, **kwargs):
        """
        Override the save method to:
        - Automatically assign the logged-in user to `generated_by`.
        - Generate and store the QR code image.
        """
        if not self.generated_by:  # Assign the logged-in user if not already set
            self.generated_by = get_current_user()

        if self.url:
            qr = qrcode.make(self.url)  # Generate QR code

            # Save QR code image to memory
            buffer = BytesIO()
            qr.save(buffer, format="PNG")

            # Create a unique file name
            file_name = f"qr_{slugify(self.name)}.png"
            self.qr_image.save(file_name, ContentFile(buffer.getvalue()), save=False)

        super().save(*args, **kwargs)  # Call the parent class's save method
